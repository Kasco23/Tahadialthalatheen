CREATE OR REPLACE FUNCTION public.generate_session_code()
RETURNS trigger
LANGUAGE plpgsql AS $$
DECLARE
  nums text;
  letters text;
  all_chars text;
  chars_array text[];
  temp_code text;
  i int;
  j int;
  tmp text;
  array_len int;
BEGIN
  -- Generate until we find a unique code
  LOOP
    -- Generate 3 random digits
    nums := '';
    FOR i IN 1..3 LOOP
      nums := nums || floor(random() * 10)::int::text;
    END LOOP;

    -- Generate 3 random uppercase letters
    letters := '';
    FOR i IN 1..3 LOOP
      letters := letters || chr(65 + floor(random() * 26)::int);
    END LOOP;

    -- Combine digits + letters (6 chars total)
    all_chars := nums || letters;

    -- Build a 6-element array of single characters
    chars_array := ARRAY[
      substring(all_chars FROM 1 FOR 1),
      substring(all_chars FROM 2 FOR 1),
      substring(all_chars FROM 3 FOR 1),
      substring(all_chars FROM 4 FOR 1),
      substring(all_chars FROM 5 FOR 1),
      substring(all_chars FROM 6 FOR 1)
    ];

    array_len := array_length(chars_array, 1);

    -- Fisherâ€“Yates shuffle to randomize order
    IF array_len IS NOT NULL AND array_len > 1 THEN
      FOR i IN REVERSE 2..array_len LOOP
        j := 1 + floor(random() * i)::int;
        tmp := chars_array[i];
        chars_array[i] := chars_array[j];
        chars_array[j] := tmp;
      END LOOP;
    END IF;

    temp_code := array_to_string(chars_array, '');

    -- Ensure uniqueness
    IF NOT EXISTS (SELECT 1 FROM public."Session" WHERE session_code = temp_code) THEN
      NEW.session_code := temp_code;
      RETURN NEW;
    END IF;
    -- otherwise repeat
  END LOOP;
END;
$$;