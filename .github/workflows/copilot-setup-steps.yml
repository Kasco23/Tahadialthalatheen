name: Copilot Setup Steps

on:
  workflow_dispatch:
  pull_request:
    paths:
      - .github/workflows/copilot-setup-steps.yml

jobs:
  copilot-setup-steps:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683a # v4.2.2

      - name: Set up pnpm
        uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0
        with:
          version: 10.16.1

      - name: Verify pnpm installation
        run: pnpm --version

      - name: Set up Node.js
        uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af1 # v4.1.0
        with:
          node-version: "22"

      - name: Verify Node.js version
        run: |
          node_version=$(node --version)
          echo "Node.js version: $node_version"
          if [[ "$node_version" != v22* ]]; then
            echo "::error::Node.js version $node_version does not match required >=22"
            exit 1
          fi

      - name: Get pnpm store directory
        id: pnpm-cache-dir
        run: |
          echo "dir=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Cache pnpm modules
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting
        run: pnpm lint

      - name: Run build
        run: pnpm build

      - name: Run tests
        run: pnpm test

      - name: Install Netlify CLI
        run: pnpm add -g netlify-cli@23

      - name: Link Netlify project
        run: |
          if [ -n "$NETLIFY_PROJECT_ID" ]; then
            echo "Linking to Netlify project: $NETLIFY_PROJECT_ID"
            netlify link --id "$NETLIFY_PROJECT_ID" || echo "Netlify linking failed, continuing..."
          else
            echo "::warning::NETLIFY_PROJECT_ID not set, skipping Netlify linking"
          fi
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_PROJECT_ID: ${{ vars.NETLIFY_PROJECT_ID }}

      - name: Authenticate Netlify CLI
        run: |
          if [ -n "$NETLIFY_AUTH_TOKEN" ]; then
            netlify status || echo "Netlify authentication check failed"
          else
            echo "::warning::NETLIFY_AUTH_TOKEN not set, skipping authentication check"
          fi
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

      - name: Verify required environment variables
        run: |
          if [ -z "$VITE_SUPABASE_DATABASE_URL" ]; then echo "::error::‚ùå VITE_SUPABASE_DATABASE_URL is missing"; exit 1; else echo "‚úÖ VITE_SUPABASE_DATABASE_URL is set"; fi
          if [ -z "$VITE_SUPABASE_ANON_KEY" ]; then echo "::error::‚ùå VITE_SUPABASE_ANON_KEY is missing"; exit 1; else echo "‚úÖ VITE_SUPABASE_ANON_KEY is set"; fi
          if [ -z "$DAILY_API_KEY" ]; then echo "::error::‚ùå DAILY_API_KEY is missing"; exit 1; else echo "‚úÖ DAILY_API_KEY is set"; fi
          if [ -z "$VITE_DAILY_DOMAIN" ]; then echo "::error::‚ùå VITE_DAILY_DOMAIN is missing"; exit 1; else echo "‚úÖ VITE_DAILY_DOMAIN is set"; fi
          if [ -z "$NETLIFY_AUTH_TOKEN" ]; then echo "::error::‚ùå NETLIFY_AUTH_TOKEN is missing"; exit 1; else echo "‚úÖ NETLIFY_AUTH_TOKEN is set"; fi
          if [ -z "$NETLIFY_PROJECT_ID" ]; then echo "::error::‚ùå NETLIFY_PROJECT_ID is missing"; exit 1; else echo "‚úÖ NETLIFY_PROJECT_ID is set"; fi
        env:
          VITE_SUPABASE_DATABASE_URL: ${{ vars.VITE_SUPABASE_DATABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ vars.VITE_SUPABASE_ANON_KEY }}
          DAILY_API_KEY: ${{ secrets.DAILY_API_KEY }}
          VITE_DAILY_DOMAIN: ${{ vars.VITE_DAILY_DOMAIN }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_PROJECT_ID: ${{ vars.NETLIFY_PROJECT_ID }}

      - name: List all repository variables
        run: |
          echo "üì¶ Repository variables available to this workflow:"
          echo "VITE_SUPABASE_DATABASE_URL: ${VITE_SUPABASE_DATABASE_URL:+set (masked)}"
          echo "VITE_SUPABASE_ANON_KEY: ${VITE_SUPABASE_ANON_KEY:+set (masked)}"
          echo "VITE_DAILY_DOMAIN: ${VITE_DAILY_DOMAIN:+set (masked)}"
          echo "NETLIFY_PROJECT_ID: ${NETLIFY_PROJECT_ID:+set (masked)}"
        env:
          VITE_SUPABASE_DATABASE_URL: ${{ vars.VITE_SUPABASE_DATABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ vars.VITE_SUPABASE_ANON_KEY }}
          VITE_DAILY_DOMAIN: ${{ vars.VITE_DAILY_DOMAIN }}
          NETLIFY_PROJECT_ID: ${{ vars.NETLIFY_PROJECT_ID }}

      - name: List all repository secrets
        run: |
          echo "üîê Repository secrets (names only, values are masked):"
          echo "NETLIFY_AUTH_TOKEN: ${NETLIFY_AUTH_TOKEN:+set (masked)}"
          echo "DAILY_API_KEY: ${DAILY_API_KEY:+set (masked)}"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          DAILY_API_KEY: ${{ secrets.DAILY_API_KEY }}

      - name: Workflow Summary
        run: |
          echo "‚úÖ Workflow completed successfully!"
          echo "üìã Summary of checks:"
          echo "  ‚Ä¢ Node.js version verified"
          echo "  ‚Ä¢ pnpm installed and configured"
          echo "  ‚Ä¢ Dependencies installed"
          echo "  ‚Ä¢ Linting passed"
          echo "  ‚Ä¢ Build completed"
          echo "  ‚Ä¢ Tests passed"
          echo "  ‚Ä¢ Environment variables verified"
          echo "  ‚Ä¢ Netlify CLI installed and authenticated"
